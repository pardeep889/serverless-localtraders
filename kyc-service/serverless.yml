service: kyc-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${file(../serverless-config.json):stage}
  region: ${file(../serverless-config.json):region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - s3:PutObject # added S3 permissions
          Resource:
            - Fn::GetAtt: [KycResource, Arn]
            - arn:aws:dynamodb:${file(../serverless-config.json):region}:945677977841:table/Asset
            - arn:aws:dynamodb:${file(../serverless-config.json):region}:945677977841:table/Transaction
            - arn:aws:s3:::kyc-bucket/* # added S3 resource

  httpApi:
    cors: true

functions:
  create-kyc:
    handler: create.handler
    events:
      - httpApi:
          path: /kyc
          method: post

  get-kyc:
    handler: get.handler
    events:
      - httpApi:
          path: /kyc/{userId}
          method: get

  fetch-sdk-token:
    handler: fetch-sdk-token.handler
    events:
      - httpApi:
          path: /kyc/sdk-token/{userId}
          method: get

  run-workflow-onfido:
    handler: runWorkflow.handler
    events:
      - httpApi:
          path: /kyc/run-onfido-workflow
          method: post

  kyc-check-onfido:
    handler: kycCheck.handler
    events:
      - httpApi:
          path: /kyc/check
          method: post

resources:
  Resources:
    KycResource:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: kyc
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

    MyS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: kyc-bucket-0137

plugins:
  - serverless-offline
